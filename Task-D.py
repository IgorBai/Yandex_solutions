# D. Экономный инженер. Условие задачи под кодом, внизу. 
# (Источник: Тренировочный контест Яндекса)
#
# Все попытки застревают на 46-м тесте: ошибка WA (неверный ответ)

import datetime


def line2data(str):  # для преобразования строк в дату и потраченную сумму
    inp = str.split()  # делим строку на 3 части, первые 2 переводим в дату+время
    dt = datetime.datetime.strptime(inp[0] + ' ' + inp[1], '%Y-%m-%d %H:%M:%S')
    money = int(inp[2])  # третью часть в деньги (если float, 46 тест тоже не работает)
    return dt, money  # возвращаем время и потраченную сумму


dt_ini = datetime.datetime.strptime('2020-12-31 23:59:59', '%Y-%m-%d %H:%M:%S')  # с миллисекундами или без -
dt_end = datetime.datetime.strptime('2021-01-31 23:59:59', '%Y-%m-%d %H:%M:%S')  # 46-й тест не проходит
money_ini = 10000  # изначально у инженера накоплено 10000 монет
money_spent = 0  # трат на начало периода нет

file_in = open("input.txt", "r")  # для чтения входных данных, безопасное открывание на 46-й тест не влияет
file_out = open("output.txt", "a")  # файл для выходных данных,  with или UTF-8 46-му тесту не помогают

for line in file_in:  # перебираем строки входных данных
    dt, money = line2data(line)  # время и затраченная сумма возвращаются функцией
    if dt_ini < dt <= dt_end:  # проверяем время на валидность
        money_spent += money  # увеличиваем кумулятивную сумму затрат
        m = money_ini - money_spent * (dt_end - dt_ini) / (dt - dt_ini)  # линейный прогноз затрат

    # answer = str(round(100*m)/100) #
    # if '.' not in answer:          #
    #     answer += '.00'            #
    # elif answer[-2] == '.':        #
    #     answer += '0'              #
    # elif answer[-1] == '.':        #
    #     answer += '00'             # такое округление тоже не проходит 46-й тест

    file_out.write(f'{m:.2f}\n')  # (f'{round(m, 2):.2f}\n') и так, и так не проходит 46-й тест


# Условие задачи
#
# Молодой инженер Сергей решил накопить денег на новую авиамодель. Подсчитав стоимость всех 
# необходимых ему частей и вычтя их из зарплаты, Сергей понял, что в месяц может потратить не 
# больше 10000 монет. Чтобы следить, что он не тратит слишком много, Сергей решил записывать 
# каждый свой расход и считать, сколько у него останется от 10000 монет, если в оставшееся время 
# он будет тратить в минуту столько же, сколько в среднем тратил до сих пор. Помогите Сергею 
# написать программу, которая будет считать это за него.

# Формат ввода
# На вход подаются от 1 до 10000 строк. Каждая строка имеет формат YYYY-MM-DD hh:mm:ss S
# Здесь YYYY-MM-DD - год-месяц-число, когда был расход, hh:mm:ss - час:минута:секунда, когда был 
# расход, S - количество потраченных монет. Время расхода T изменяется в рамках 
# (2021-01-01 00:00:00 ≤ T ≤ 2021-01-31 23:59:59). Сумма расхода S - это целое число: 1 ≤ S ≤ 1000.
# Строки подаются на вход в порядке не убывания времени расхода.
#
# Формат вывода
# Для каждой строки на входе необходимо посчитать сумму, которая останется у инженера на момент 
# времени 2021-02-01 00:00:00, если инженер будет в среднем тратить столько же, сколько тратил до 
# момента времени в строке включительно.
# Сумму необходимо округлить банковским методом (например, round() в Python 3.7.3) и записать с 
# двумя цифрами после запятой.