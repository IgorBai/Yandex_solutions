# Задача F. Найти склад. Условие задачи под кодом, внизу. 
# (Источник: Тренировочный контест Яндекса)


import sys

def line_int():  # для считывания строк из консоли
    return [int(i) for i in sys.stdin.readline().split()]


def look(elem, st):  # для поиска в сете st складов, с которыми у elem есть связь
    e = set()
    e.add(elem)  # elem это int id склада, а нам нужен set для (y - e)
    return [tuple(y - e)[0] for y in st if elem in y]


n_svazi = int(sys.stdin.readline().strip())  # количество связей (пар складов)
svazi = set()  # здесь храним связи как сет сетов (множество множеств)
for i in range(n_svazi):
    svazi.add(frozenset(line_int()))  # frozenset - неизменяемое множество


n_zakaz = int(sys.stdin.readline().strip())  # получаем количество заказов

library = dict()  # тут храним ответы функции look (эффективность пока не понятна...)

for k in range(n_zakaz):  # перебираем построчно, для каждого заказа
    need, n_serv = line_int()  # считываем склад-заказчик и количество складов-поставщиков
    serv = line_int()  # склады-поставщики

    ans = []  # список, в который попадут склады-поставщики с нужной связью
    for srv in serv:  # srv это склад-поставщик для текущей итерации перебора

        nxt = [srv]  # nxt хранит id складов, по которым нужно провести поиск функцией look
        checked = set()  # здесь храним уже проверенные склады

        while nxt:  # ищем, пока есть что искать
            if nxt[0] not in library:
                rep = look(nxt[0], svazi)  # ответ функции поиска, склады с которыми есть связь
                library[nxt[0]] = rep  # пополняем library
                for i in rep:
                    svazi.add(frozenset((nxt[0], i)))  # пополняем svazi, если пара новая-уникальная
            else:
                rep = library[nxt[0]]

            checked.add(nxt[0])  # чтобы не зацикливался поиск, сюда складываем уже проверенное
            nxt.pop(0)  # нулевой элемент удалили, по нему поиск только что прошёл

            if need in rep:  # если склад-заказчик в ответе функции look
                nxt.clear()  # очередь на поиск обнуляем
                ans.append(srv)  # хороший склад-поставщик передаём в список ответов

            else:
                # for i in rep:  # перебираем ответ функции look
                #     if i not in checked:  # если это склад, который пока не проверяли,
                #         nxt.append(i)  # добавляем его в конец списка для следующих поисков
                nxt.extend([i for i in rep if i not in checked])  # то же самое

    print(len(ans), *ans)  # для заказа из текущей итерации печатаем ответ

exit(0)  # на всякий случай


# Условие задачи
#
# Торговая сеть «Руки из плеч» состоит из нескольких магазинов-складов. В складской системе учёта они 
# обозначены уникальным целочисленным идентификатором. N пар магазинов-складов объединены в кластеры 
# по территориальному принципу.
# Периодически нужного товара не оказывается на определенном складе, и тогда товар может быть доставлен 
# с другого склада, но только из своего кластера, т.к. доставка товаров со складов другого кластера 
# нерентабельна.
# Напишите программу, которая будет показывать, с какого на какой склад может быть доставлен необходимый 
# товар.
#
#
# Формат ввода
# Первая строка содержит целое число N (до 10**6) — количество связей между складами.
# Следующие N строк описывают связи между складами. Каждая из них содержит целые числа Ui и Vi (до 10**9) 
# — идентификаторы соединённых складов.
# Следующая строка содержит целое число T (1≤T≤10**3) — количество запросов на доставку товара на склад 
# для доставки покупателю.
# Следующие (2*T) строк описывают запросы. Первая строка каждой пары содержит целые числа Xi и Ki (10**9,
# 1≤Ki≤100) — соответственно идентификатор склада, на который нужно доставить товар, и количество складов,
# содержащих товар. Вторая строка каждой пары содержит Ki целых чисел Yij (1≤Yij≤109) — идентификаторы 
# складов с товаром.
#
# Формат вывода
# Для каждого запроса в отдельной строке выведите сначала целое число Rj — количество складов, откуда можно 
# доставить товар. Затем выведите Rj целых чисел — номера складов, откуда можно доставить товар. Номера 
# складов следует выводить в том порядке, в котором они перечислены в описании соответствующего запроса во 
# входных данных.
